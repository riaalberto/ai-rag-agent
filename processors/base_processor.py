"""
üèóÔ∏è Clase base para todos los procesadores de archivos
Establece la interfaz com√∫n que deben implementar todos los procesadores
"""

from abc import ABC, abstractmethod
from typing import Dict, Any, List, Optional
import logging

logger = logging.getLogger(__name__)

class BaseProcessor(ABC):
    """
    Clase base abstracta para procesadores de archivos
    """
    
    def __init__(self, supported_extensions: List[str], processor_name: str):
        self.supported_extensions = supported_extensions
        self.processor_name = processor_name
        logger.info(f"‚úÖ {processor_name} processor initialized")
    
    def can_process(self, filename: str) -> bool:
        """Verifica si este procesador puede manejar el archivo"""
        extension = filename.lower().split('.')[-1]
        return f".{extension}" in self.supported_extensions
    
    @abstractmethod
    async def extract_text(self, file_content: bytes, filename: str) -> str:
        """
        Extrae texto del archivo (m√©todo obligatorio para todos los procesadores)
        
        Args:
            file_content: Contenido del archivo en bytes
            filename: Nombre del archivo
            
        Returns:
            str: Texto extra√≠do del archivo
        """
        pass
    
    def analyze_content(self, content: str, filename: str) -> Optional[Dict[str, Any]]:
        """
        An√°lisis opcional del contenido (pueden sobreescribir los procesadores que lo necesiten)
        
        Args:
            content: Texto extra√≠do
            filename: Nombre del archivo
            
        Returns:
            Dict opcional con an√°lisis adicional
        """
        return None
    
    def generate_metadata(self, file_content: bytes, filename: str) -> Dict[str, Any]:
        """
        Genera metadatos b√°sicos del archivo
        
        Args:
            file_content: Contenido del archivo
            filename: Nombre del archivo
            
        Returns:
            Dict con metadatos b√°sicos
        """
        return {
            "filename": filename,
            "file_size": len(file_content),
            "processor_used": self.processor_name,
            "supported_extensions": self.supported_extensions
        }
    
    async def process_file(self, file_content: bytes, filename: str) -> Dict[str, Any]:
        """
        M√©todo principal que procesa el archivo completo
        
        Args:
            file_content: Contenido del archivo
            filename: Nombre del archivo
            
        Returns:
            Dict con toda la informaci√≥n procesada
        """
        try:
            logger.info(f"üîÑ Processing {filename} with {self.processor_name}")
            
            # 1. Extraer texto
            extracted_text = await self.extract_text(file_content, filename)
            
            # 2. Generar metadatos
            metadata = self.generate_metadata(file_content, filename)
            
            # 3. An√°lisis opcional
            analysis = self.analyze_content(extracted_text, filename)
            
            result = {
                "success": True,
                "extracted_text": extracted_text,
                "metadata": metadata,
                "analysis": analysis,
                "processor": self.processor_name
            }
            
            logger.info(f"‚úÖ Successfully processed {filename}")
            return result
            
        except Exception as e:
            error_msg = f"‚ùå Error processing {filename} with {self.processor_name}: {str(e)}"
            logger.error(error_msg)
            return {
                "success": False,
                "error": error_msg,
                "processor": self.processor_name
            }
    
    def validate_file(self, file_content: bytes, filename: str) -> tuple[bool, str]:
        """
        Valida si el archivo es v√°lido para este procesador
        
        Args:
            file_content: Contenido del archivo
            filename: Nombre del archivo
            
        Returns:
            Tuple (es_v√°lido, mensaje)
        """
        # Validaci√≥n b√°sica de extensi√≥n
        if not self.can_process(filename):
            return False, f"Extension not supported by {self.processor_name}"
        
        # Validaci√≥n b√°sica de tama√±o
        if len(file_content) == 0:
            return False, "File is empty"
        
        # Validaci√≥n b√°sica de tama√±o m√°ximo (50MB)
        max_size = 50 * 1024 * 1024  # 50MB
        if len(file_content) > max_size:
            return False, f"File too large (max {max_size/1024/1024}MB)"
        
        return True, "File is valid"

class ProcessorRegistry:
    """
    Registro centralizado de todos los procesadores disponibles
    """
    
    def __init__(self):
        self.processors: List[BaseProcessor] = []
        logger.info("üèóÔ∏è Processor registry initialized")
    
    def register(self, processor: BaseProcessor):
        """Registra un nuevo procesador"""
        self.processors.append(processor)
        logger.info(f"üìù Registered processor: {processor.processor_name}")
    
    def get_processor(self, filename: str) -> Optional[BaseProcessor]:
        """Encuentra el procesador adecuado para un archivo"""
        for processor in self.processors:
            if processor.can_process(filename):
                logger.info(f"üéØ Found processor {processor.processor_name} for {filename}")
                return processor
        
        logger.warning(f"‚ùå No processor found for {filename}")
        return None
    
    def list_supported_extensions(self) -> List[str]:
        """Lista todas las extensiones soportadas"""
        extensions = []
        for processor in self.processors:
            extensions.extend(processor.supported_extensions)
        return sorted(list(set(extensions)))
    
    def get_processor_info(self) -> Dict[str, Any]:
        """Informaci√≥n de todos los procesadores registrados"""
        return {
            "total_processors": len(self.processors),
            "processors": [
                {
                    "name": p.processor_name,
                    "extensions": p.supported_extensions
                }
                for p in self.processors
            ],
            "total_extensions": len(self.list_supported_extensions()),
            "supported_extensions": self.list_supported_extensions()
        }